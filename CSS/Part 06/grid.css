.container {
    width: 600px;
    height: 400px;
    background-color: grey;
    display: grid;
    /*grid is same as flex but it is 2D*/
}

.item {
    /* width: 100px;
    height: 50px; */
    background-color: salmon;
    border: 2px solid black;
    text-align: center;
    font-weight: 600;
}





/*grid-template-rows/columns*/
/* used to define the size of the track size in rows and column */
.container {
    grid-template-rows: 100px 100px 100px;
    grid-template-columns: 100px 100px 100px;
}

/* grid-template-rows : auto -> automatically make the equal size track according to the space given */

/* is grid items width and height is not defined then it will take the size of the track */
/* easy way to define */
.container {
    grid-template-rows: repeat(6, 1fr);
    /* it will create 6 row(7 lines) with equal size accroding to fraction value */
    grid-template-columns: 1fr 1fr 1fr 1fr;
}




/* Grid gapping -> proving gap for lines */
.container {
    grid-gap: 10px;
    /* it will provide gap between the lines */
    /* grid-row-gap: 10px; */
    /* grid-column-gap: 10px; */
    /* we can also do it individually by row-gap and column-gap */
}




/* if i want to give more then one cell to a specific item */
/* grid-column-start/end */
.item_start_end {
    grid-column-start: 1;
    grid-column-end: 3;
    /* provid eperticular special space to a item */


    background-color: salmon;
    border: 2px solid black;
    text-align: center;
    font-weight: 600;

}

/* shorthand for grid-column-end/start */
.item_start_end {
    grid-column: 1/3;
}

/* if i want too give end line relative to the start line */
.item_start_end {
    grid-column: 1/span 2;
    /* it will start from 1 and end at 1+2=3 */
}

/* we can do the same for row with grid-row-start/end */
.item_start_end {
    grid-row: 1/3;
    /* it will start from 1 and end at 1+2=3 */
}




/* justify-items/self */
/* same as we learnt in flexbox but the cell will act as flexcontainer */
/* justify-items : start/end/center */

/* the above is for horizontal alignment */
/* for vertical alignment we use align-items/self */

/* for doing both in one */
/* place-items/self */




/* grid is bydefault block element */
/* if we want to make it inline */
.container {
    display: inline-grid;
    /* it will make the grid inline */
}